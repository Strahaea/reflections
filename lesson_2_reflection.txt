Q: What happens when you initialize a repository?
Why do you need to do it?

A: Repositories need to be initilialized so that git 
treats them as a repository and can begin to take in commits on those
files. If you did not initilialize git would not know to be involved
with those files.

Q: How is the staging area different from the working directory
and the repository? What value do you think it offers?

A: The staging area allows a user to think about what
they are doing before they made a commit and also allows
them to add what files they believe are necessary for that commit.

Q: How can you use the staging area to make sure you have one commit
per logical change?

A: Using the staging area you can compare with the previous commit version using diff and ensure that you are only making one logical change per commit.

Q: What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

A: Branches are useful when a project can go in two different directions. For instance, different languages on a website, or a game that has 
an easy mode and a hard mode. In both cases the basis of the product 
are the same but some particular features differ.

Q: How do the diagrams help you visualize the branch structure?

A: The diagrams allow you to see how various commits relate to eachother
within branches and explains why commits not on a branch will not show up in git log, because they are not related to the commit being explored.

Q: What is the result of merging two branches togeth? Why do represent
it in the diagram the way we do?

A: The result of merging two branches together is that you have 
the features of both versions, for instance coins and color and you can 
then further use the new features together like making colored coins.  

We represent the diagram the way we do to show the merging taking place.